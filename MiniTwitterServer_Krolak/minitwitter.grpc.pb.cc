// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: minitwitter.proto

#include "minitwitter.pb.h"
#include "minitwitter.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace minitwitter {

static const char* MiniTwitter_method_names[] = {
  "/minitwitter.MiniTwitter/PostTweet",
  "/minitwitter.MiniTwitter/GetTweets",
  "/minitwitter.MiniTwitter/LogIn",
  "/minitwitter.MiniTwitter/LogOut",
};

std::unique_ptr< MiniTwitter::Stub> MiniTwitter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MiniTwitter::Stub> stub(new MiniTwitter::Stub(channel, options));
  return stub;
}

MiniTwitter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PostTweet_(MiniTwitter_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTweets_(MiniTwitter_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LogIn_(MiniTwitter_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LogOut_(MiniTwitter_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MiniTwitter::Stub::PostTweet(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest& request, ::minitwitter::PostTweetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minitwitter::PostTweetRequest, ::minitwitter::PostTweetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PostTweet_, context, request, response);
}

void MiniTwitter::Stub::async::PostTweet(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest* request, ::minitwitter::PostTweetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minitwitter::PostTweetRequest, ::minitwitter::PostTweetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostTweet_, context, request, response, std::move(f));
}

void MiniTwitter::Stub::async::PostTweet(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest* request, ::minitwitter::PostTweetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PostTweet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minitwitter::PostTweetResponse>* MiniTwitter::Stub::PrepareAsyncPostTweetRaw(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minitwitter::PostTweetResponse, ::minitwitter::PostTweetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PostTweet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minitwitter::PostTweetResponse>* MiniTwitter::Stub::AsyncPostTweetRaw(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPostTweetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MiniTwitter::Stub::GetTweets(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest& request, ::minitwitter::GetTweetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minitwitter::GetTweetsRequest, ::minitwitter::GetTweetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTweets_, context, request, response);
}

void MiniTwitter::Stub::async::GetTweets(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest* request, ::minitwitter::GetTweetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minitwitter::GetTweetsRequest, ::minitwitter::GetTweetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTweets_, context, request, response, std::move(f));
}

void MiniTwitter::Stub::async::GetTweets(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest* request, ::minitwitter::GetTweetsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTweets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minitwitter::GetTweetsResponse>* MiniTwitter::Stub::PrepareAsyncGetTweetsRaw(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minitwitter::GetTweetsResponse, ::minitwitter::GetTweetsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTweets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minitwitter::GetTweetsResponse>* MiniTwitter::Stub::AsyncGetTweetsRaw(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTweetsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MiniTwitter::Stub::LogIn(::grpc::ClientContext* context, const ::minitwitter::LogInRequest& request, ::minitwitter::LogInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minitwitter::LogInRequest, ::minitwitter::LogInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LogIn_, context, request, response);
}

void MiniTwitter::Stub::async::LogIn(::grpc::ClientContext* context, const ::minitwitter::LogInRequest* request, ::minitwitter::LogInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minitwitter::LogInRequest, ::minitwitter::LogInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LogIn_, context, request, response, std::move(f));
}

void MiniTwitter::Stub::async::LogIn(::grpc::ClientContext* context, const ::minitwitter::LogInRequest* request, ::minitwitter::LogInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LogIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minitwitter::LogInResponse>* MiniTwitter::Stub::PrepareAsyncLogInRaw(::grpc::ClientContext* context, const ::minitwitter::LogInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minitwitter::LogInResponse, ::minitwitter::LogInRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LogIn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minitwitter::LogInResponse>* MiniTwitter::Stub::AsyncLogInRaw(::grpc::ClientContext* context, const ::minitwitter::LogInRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogInRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MiniTwitter::Stub::LogOut(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest& request, ::minitwitter::LogOutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minitwitter::LogOutRequest, ::minitwitter::LogOutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LogOut_, context, request, response);
}

void MiniTwitter::Stub::async::LogOut(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest* request, ::minitwitter::LogOutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minitwitter::LogOutRequest, ::minitwitter::LogOutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LogOut_, context, request, response, std::move(f));
}

void MiniTwitter::Stub::async::LogOut(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest* request, ::minitwitter::LogOutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LogOut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minitwitter::LogOutResponse>* MiniTwitter::Stub::PrepareAsyncLogOutRaw(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minitwitter::LogOutResponse, ::minitwitter::LogOutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LogOut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minitwitter::LogOutResponse>* MiniTwitter::Stub::AsyncLogOutRaw(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogOutRaw(context, request, cq);
  result->StartCall();
  return result;
}

MiniTwitter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiniTwitter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiniTwitter::Service, ::minitwitter::PostTweetRequest, ::minitwitter::PostTweetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiniTwitter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minitwitter::PostTweetRequest* req,
             ::minitwitter::PostTweetResponse* resp) {
               return service->PostTweet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiniTwitter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiniTwitter::Service, ::minitwitter::GetTweetsRequest, ::minitwitter::GetTweetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiniTwitter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minitwitter::GetTweetsRequest* req,
             ::minitwitter::GetTweetsResponse* resp) {
               return service->GetTweets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiniTwitter_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiniTwitter::Service, ::minitwitter::LogInRequest, ::minitwitter::LogInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiniTwitter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minitwitter::LogInRequest* req,
             ::minitwitter::LogInResponse* resp) {
               return service->LogIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MiniTwitter_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MiniTwitter::Service, ::minitwitter::LogOutRequest, ::minitwitter::LogOutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MiniTwitter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minitwitter::LogOutRequest* req,
             ::minitwitter::LogOutResponse* resp) {
               return service->LogOut(ctx, req, resp);
             }, this)));
}

MiniTwitter::Service::~Service() {
}

::grpc::Status MiniTwitter::Service::PostTweet(::grpc::ServerContext* context, const ::minitwitter::PostTweetRequest* request, ::minitwitter::PostTweetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MiniTwitter::Service::GetTweets(::grpc::ServerContext* context, const ::minitwitter::GetTweetsRequest* request, ::minitwitter::GetTweetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MiniTwitter::Service::LogIn(::grpc::ServerContext* context, const ::minitwitter::LogInRequest* request, ::minitwitter::LogInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MiniTwitter::Service::LogOut(::grpc::ServerContext* context, const ::minitwitter::LogOutRequest* request, ::minitwitter::LogOutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace minitwitter

