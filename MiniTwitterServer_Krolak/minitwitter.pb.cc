// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minitwitter.proto

#include "minitwitter.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace minitwitter {
PROTOBUF_CONSTEXPR Tweet::Tweet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TweetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TweetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TweetDefaultTypeInternal() {}
  union {
    Tweet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TweetDefaultTypeInternal _Tweet_default_instance_;
PROTOBUF_CONSTEXPR LogInRequest::LogInRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogInRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogInRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogInRequestDefaultTypeInternal() {}
  union {
    LogInRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogInRequestDefaultTypeInternal _LogInRequest_default_instance_;
PROTOBUF_CONSTEXPR LogInResponse::LogInResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogInResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogInResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogInResponseDefaultTypeInternal() {}
  union {
    LogInResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogInResponseDefaultTypeInternal _LogInResponse_default_instance_;
PROTOBUF_CONSTEXPR LogOutRequest::LogOutRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogOutRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogOutRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogOutRequestDefaultTypeInternal() {}
  union {
    LogOutRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogOutRequestDefaultTypeInternal _LogOutRequest_default_instance_;
PROTOBUF_CONSTEXPR LogOutResponse::LogOutResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogOutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogOutResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogOutResponseDefaultTypeInternal() {}
  union {
    LogOutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogOutResponseDefaultTypeInternal _LogOutResponse_default_instance_;
PROTOBUF_CONSTEXPR GetTweetsRequest::GetTweetsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.n_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTweetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTweetsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTweetsRequestDefaultTypeInternal() {}
  union {
    GetTweetsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTweetsRequestDefaultTypeInternal _GetTweetsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTweetsResponse::GetTweetsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tweets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTweetsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTweetsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTweetsResponseDefaultTypeInternal() {}
  union {
    GetTweetsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTweetsResponseDefaultTypeInternal _GetTweetsResponse_default_instance_;
PROTOBUF_CONSTEXPR PostTweetRequest::PostTweetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tweet_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostTweetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostTweetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostTweetRequestDefaultTypeInternal() {}
  union {
    PostTweetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostTweetRequestDefaultTypeInternal _PostTweetRequest_default_instance_;
PROTOBUF_CONSTEXPR PostTweetResponse::PostTweetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostTweetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostTweetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostTweetResponseDefaultTypeInternal() {}
  union {
    PostTweetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostTweetResponseDefaultTypeInternal _PostTweetResponse_default_instance_;
}  // namespace minitwitter
static ::_pb::Metadata file_level_metadata_minitwitter_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_minitwitter_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_minitwitter_2eproto = nullptr;

const uint32_t TableStruct_minitwitter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minitwitter::Tweet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minitwitter::Tweet, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::minitwitter::Tweet, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minitwitter::LogInRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minitwitter::LogInRequest, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minitwitter::LogInResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minitwitter::LogInResponse, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minitwitter::LogOutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minitwitter::LogOutRequest, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minitwitter::LogOutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minitwitter::LogOutResponse, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minitwitter::GetTweetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minitwitter::GetTweetsRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::minitwitter::GetTweetsRequest, _impl_.n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minitwitter::GetTweetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minitwitter::GetTweetsResponse, _impl_.tweets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minitwitter::PostTweetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minitwitter::PostTweetRequest, _impl_.tweet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minitwitter::PostTweetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minitwitter::PostTweetResponse, _impl_.success_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minitwitter::Tweet)},
  { 8, -1, -1, sizeof(::minitwitter::LogInRequest)},
  { 15, -1, -1, sizeof(::minitwitter::LogInResponse)},
  { 22, -1, -1, sizeof(::minitwitter::LogOutRequest)},
  { 29, -1, -1, sizeof(::minitwitter::LogOutResponse)},
  { 36, -1, -1, sizeof(::minitwitter::GetTweetsRequest)},
  { 44, -1, -1, sizeof(::minitwitter::GetTweetsResponse)},
  { 51, -1, -1, sizeof(::minitwitter::PostTweetRequest)},
  { 58, -1, -1, sizeof(::minitwitter::PostTweetResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::minitwitter::_Tweet_default_instance_._instance,
  &::minitwitter::_LogInRequest_default_instance_._instance,
  &::minitwitter::_LogInResponse_default_instance_._instance,
  &::minitwitter::_LogOutRequest_default_instance_._instance,
  &::minitwitter::_LogOutResponse_default_instance_._instance,
  &::minitwitter::_GetTweetsRequest_default_instance_._instance,
  &::minitwitter::_GetTweetsResponse_default_instance_._instance,
  &::minitwitter::_PostTweetRequest_default_instance_._instance,
  &::minitwitter::_PostTweetResponse_default_instance_._instance,
};

const char descriptor_table_protodef_minitwitter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021minitwitter.proto\022\013minitwitter\"#\n\005Twee"
  "t\022\014\n\004user\030\001 \001(\t\022\014\n\004text\030\002 \001(\t\"\034\n\014LogInRe"
  "quest\022\014\n\004user\030\001 \001(\t\" \n\rLogInResponse\022\017\n\007"
  "success\030\001 \001(\005\"\035\n\rLogOutRequest\022\014\n\004user\030\001"
  " \001(\t\"!\n\016LogOutResponse\022\017\n\007success\030\001 \001(\005\""
  "+\n\020GetTweetsRequest\022\014\n\004user\030\001 \001(\t\022\t\n\001n\030\002"
  " \001(\005\"7\n\021GetTweetsResponse\022\"\n\006tweets\030\001 \003("
  "\0132\022.minitwitter.Tweet\"5\n\020PostTweetReques"
  "t\022!\n\005tweet\030\001 \001(\0132\022.minitwitter.Tweet\"$\n\021"
  "PostTweetResponse\022\017\n\007success\030\001 \001(\0102\250\002\n\013M"
  "iniTwitter\022J\n\tPostTweet\022\035.minitwitter.Po"
  "stTweetRequest\032\036.minitwitter.PostTweetRe"
  "sponse\022J\n\tGetTweets\022\035.minitwitter.GetTwe"
  "etsRequest\032\036.minitwitter.GetTweetsRespon"
  "se\022>\n\005LogIn\022\031.minitwitter.LogInRequest\032\032"
  ".minitwitter.LogInResponse\022A\n\006LogOut\022\032.m"
  "initwitter.LogOutRequest\032\033.minitwitter.L"
  "ogOutResponseb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_minitwitter_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_minitwitter_2eproto = {
    false, false, 701, descriptor_table_protodef_minitwitter_2eproto,
    "minitwitter.proto",
    &descriptor_table_minitwitter_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_minitwitter_2eproto::offsets,
    file_level_metadata_minitwitter_2eproto, file_level_enum_descriptors_minitwitter_2eproto,
    file_level_service_descriptors_minitwitter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_minitwitter_2eproto_getter() {
  return &descriptor_table_minitwitter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_minitwitter_2eproto(&descriptor_table_minitwitter_2eproto);
namespace minitwitter {

// ===================================================================

class Tweet::_Internal {
 public:
};

Tweet::Tweet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minitwitter.Tweet)
}
Tweet::Tweet(const Tweet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tweet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minitwitter.Tweet)
}

inline void Tweet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tweet::~Tweet() {
  // @@protoc_insertion_point(destructor:minitwitter.Tweet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tweet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
  _impl_.text_.Destroy();
}

void Tweet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tweet::Clear() {
// @@protoc_insertion_point(message_clear_start:minitwitter.Tweet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tweet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "minitwitter.Tweet.user"));
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "minitwitter.Tweet.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tweet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minitwitter.Tweet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minitwitter.Tweet.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minitwitter.Tweet.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minitwitter.Tweet)
  return target;
}

size_t Tweet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minitwitter.Tweet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tweet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tweet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tweet::GetClassData() const { return &_class_data_; }


void Tweet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tweet*>(&to_msg);
  auto& from = static_cast<const Tweet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minitwitter.Tweet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tweet::CopyFrom(const Tweet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minitwitter.Tweet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tweet::IsInitialized() const {
  return true;
}

void Tweet::InternalSwap(Tweet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Tweet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minitwitter_2eproto_getter, &descriptor_table_minitwitter_2eproto_once,
      file_level_metadata_minitwitter_2eproto[0]);
}

// ===================================================================

class LogInRequest::_Internal {
 public:
};

LogInRequest::LogInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minitwitter.LogInRequest)
}
LogInRequest::LogInRequest(const LogInRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogInRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minitwitter.LogInRequest)
}

inline void LogInRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogInRequest::~LogInRequest() {
  // @@protoc_insertion_point(destructor:minitwitter.LogInRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogInRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
}

void LogInRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogInRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minitwitter.LogInRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogInRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "minitwitter.LogInRequest.user"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogInRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minitwitter.LogInRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minitwitter.LogInRequest.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minitwitter.LogInRequest)
  return target;
}

size_t LogInRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minitwitter.LogInRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogInRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogInRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogInRequest::GetClassData() const { return &_class_data_; }


void LogInRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogInRequest*>(&to_msg);
  auto& from = static_cast<const LogInRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minitwitter.LogInRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogInRequest::CopyFrom(const LogInRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minitwitter.LogInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInRequest::IsInitialized() const {
  return true;
}

void LogInRequest::InternalSwap(LogInRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LogInRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minitwitter_2eproto_getter, &descriptor_table_minitwitter_2eproto_once,
      file_level_metadata_minitwitter_2eproto[1]);
}

// ===================================================================

class LogInResponse::_Internal {
 public:
};

LogInResponse::LogInResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minitwitter.LogInResponse)
}
LogInResponse::LogInResponse(const LogInResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogInResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:minitwitter.LogInResponse)
}

inline void LogInResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogInResponse::~LogInResponse() {
  // @@protoc_insertion_point(destructor:minitwitter.LogInResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogInResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogInResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogInResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minitwitter.LogInResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogInResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogInResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minitwitter.LogInResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minitwitter.LogInResponse)
  return target;
}

size_t LogInResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minitwitter.LogInResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 success = 1;
  if (this->_internal_success() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_success());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogInResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogInResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogInResponse::GetClassData() const { return &_class_data_; }


void LogInResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogInResponse*>(&to_msg);
  auto& from = static_cast<const LogInResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minitwitter.LogInResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogInResponse::CopyFrom(const LogInResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minitwitter.LogInResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInResponse::IsInitialized() const {
  return true;
}

void LogInResponse::InternalSwap(LogInResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogInResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minitwitter_2eproto_getter, &descriptor_table_minitwitter_2eproto_once,
      file_level_metadata_minitwitter_2eproto[2]);
}

// ===================================================================

class LogOutRequest::_Internal {
 public:
};

LogOutRequest::LogOutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minitwitter.LogOutRequest)
}
LogOutRequest::LogOutRequest(const LogOutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogOutRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minitwitter.LogOutRequest)
}

inline void LogOutRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogOutRequest::~LogOutRequest() {
  // @@protoc_insertion_point(destructor:minitwitter.LogOutRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogOutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
}

void LogOutRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogOutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minitwitter.LogOutRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogOutRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "minitwitter.LogOutRequest.user"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogOutRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minitwitter.LogOutRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minitwitter.LogOutRequest.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minitwitter.LogOutRequest)
  return target;
}

size_t LogOutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minitwitter.LogOutRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogOutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogOutRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogOutRequest::GetClassData() const { return &_class_data_; }


void LogOutRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogOutRequest*>(&to_msg);
  auto& from = static_cast<const LogOutRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minitwitter.LogOutRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogOutRequest::CopyFrom(const LogOutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minitwitter.LogOutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogOutRequest::IsInitialized() const {
  return true;
}

void LogOutRequest::InternalSwap(LogOutRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LogOutRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minitwitter_2eproto_getter, &descriptor_table_minitwitter_2eproto_once,
      file_level_metadata_minitwitter_2eproto[3]);
}

// ===================================================================

class LogOutResponse::_Internal {
 public:
};

LogOutResponse::LogOutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minitwitter.LogOutResponse)
}
LogOutResponse::LogOutResponse(const LogOutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogOutResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:minitwitter.LogOutResponse)
}

inline void LogOutResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogOutResponse::~LogOutResponse() {
  // @@protoc_insertion_point(destructor:minitwitter.LogOutResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogOutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogOutResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogOutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minitwitter.LogOutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogOutResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogOutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minitwitter.LogOutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minitwitter.LogOutResponse)
  return target;
}

size_t LogOutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minitwitter.LogOutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 success = 1;
  if (this->_internal_success() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_success());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogOutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogOutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogOutResponse::GetClassData() const { return &_class_data_; }


void LogOutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogOutResponse*>(&to_msg);
  auto& from = static_cast<const LogOutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minitwitter.LogOutResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogOutResponse::CopyFrom(const LogOutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minitwitter.LogOutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogOutResponse::IsInitialized() const {
  return true;
}

void LogOutResponse::InternalSwap(LogOutResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogOutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minitwitter_2eproto_getter, &descriptor_table_minitwitter_2eproto_once,
      file_level_metadata_minitwitter_2eproto[4]);
}

// ===================================================================

class GetTweetsRequest::_Internal {
 public:
};

GetTweetsRequest::GetTweetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minitwitter.GetTweetsRequest)
}
GetTweetsRequest::GetTweetsRequest(const GetTweetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTweetsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.n_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.n_ = from._impl_.n_;
  // @@protoc_insertion_point(copy_constructor:minitwitter.GetTweetsRequest)
}

inline void GetTweetsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.n_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTweetsRequest::~GetTweetsRequest() {
  // @@protoc_insertion_point(destructor:minitwitter.GetTweetsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTweetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
}

void GetTweetsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTweetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minitwitter.GetTweetsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  _impl_.n_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTweetsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "minitwitter.GetTweetsRequest.user"));
        } else
          goto handle_unusual;
        continue;
      // int32 n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTweetsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minitwitter.GetTweetsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minitwitter.GetTweetsRequest.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // int32 n = 2;
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minitwitter.GetTweetsRequest)
  return target;
}

size_t GetTweetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minitwitter.GetTweetsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // int32 n = 2;
  if (this->_internal_n() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTweetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTweetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTweetsRequest::GetClassData() const { return &_class_data_; }


void GetTweetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTweetsRequest*>(&to_msg);
  auto& from = static_cast<const GetTweetsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minitwitter.GetTweetsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (from._internal_n() != 0) {
    _this->_internal_set_n(from._internal_n());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTweetsRequest::CopyFrom(const GetTweetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minitwitter.GetTweetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTweetsRequest::IsInitialized() const {
  return true;
}

void GetTweetsRequest::InternalSwap(GetTweetsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  swap(_impl_.n_, other->_impl_.n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTweetsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minitwitter_2eproto_getter, &descriptor_table_minitwitter_2eproto_once,
      file_level_metadata_minitwitter_2eproto[5]);
}

// ===================================================================

class GetTweetsResponse::_Internal {
 public:
};

GetTweetsResponse::GetTweetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minitwitter.GetTweetsResponse)
}
GetTweetsResponse::GetTweetsResponse(const GetTweetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTweetsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tweets_){from._impl_.tweets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minitwitter.GetTweetsResponse)
}

inline void GetTweetsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tweets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTweetsResponse::~GetTweetsResponse() {
  // @@protoc_insertion_point(destructor:minitwitter.GetTweetsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTweetsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tweets_.~RepeatedPtrField();
}

void GetTweetsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTweetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minitwitter.GetTweetsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tweets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTweetsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minitwitter.Tweet tweets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tweets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTweetsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minitwitter.GetTweetsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minitwitter.Tweet tweets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tweets_size()); i < n; i++) {
    const auto& repfield = this->_internal_tweets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minitwitter.GetTweetsResponse)
  return target;
}

size_t GetTweetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minitwitter.GetTweetsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minitwitter.Tweet tweets = 1;
  total_size += 1UL * this->_internal_tweets_size();
  for (const auto& msg : this->_impl_.tweets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTweetsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTweetsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTweetsResponse::GetClassData() const { return &_class_data_; }


void GetTweetsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTweetsResponse*>(&to_msg);
  auto& from = static_cast<const GetTweetsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minitwitter.GetTweetsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tweets_.MergeFrom(from._impl_.tweets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTweetsResponse::CopyFrom(const GetTweetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minitwitter.GetTweetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTweetsResponse::IsInitialized() const {
  return true;
}

void GetTweetsResponse::InternalSwap(GetTweetsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tweets_.InternalSwap(&other->_impl_.tweets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTweetsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minitwitter_2eproto_getter, &descriptor_table_minitwitter_2eproto_once,
      file_level_metadata_minitwitter_2eproto[6]);
}

// ===================================================================

class PostTweetRequest::_Internal {
 public:
  static const ::minitwitter::Tweet& tweet(const PostTweetRequest* msg);
};

const ::minitwitter::Tweet&
PostTweetRequest::_Internal::tweet(const PostTweetRequest* msg) {
  return *msg->_impl_.tweet_;
}
PostTweetRequest::PostTweetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minitwitter.PostTweetRequest)
}
PostTweetRequest::PostTweetRequest(const PostTweetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostTweetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tweet_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tweet()) {
    _this->_impl_.tweet_ = new ::minitwitter::Tweet(*from._impl_.tweet_);
  }
  // @@protoc_insertion_point(copy_constructor:minitwitter.PostTweetRequest)
}

inline void PostTweetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tweet_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostTweetRequest::~PostTweetRequest() {
  // @@protoc_insertion_point(destructor:minitwitter.PostTweetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostTweetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tweet_;
}

void PostTweetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostTweetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minitwitter.PostTweetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tweet_ != nullptr) {
    delete _impl_.tweet_;
  }
  _impl_.tweet_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostTweetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minitwitter.Tweet tweet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tweet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostTweetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minitwitter.PostTweetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minitwitter.Tweet tweet = 1;
  if (this->_internal_has_tweet()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tweet(this),
        _Internal::tweet(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minitwitter.PostTweetRequest)
  return target;
}

size_t PostTweetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minitwitter.PostTweetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minitwitter.Tweet tweet = 1;
  if (this->_internal_has_tweet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tweet_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostTweetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostTweetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostTweetRequest::GetClassData() const { return &_class_data_; }


void PostTweetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostTweetRequest*>(&to_msg);
  auto& from = static_cast<const PostTweetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minitwitter.PostTweetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tweet()) {
    _this->_internal_mutable_tweet()->::minitwitter::Tweet::MergeFrom(
        from._internal_tweet());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostTweetRequest::CopyFrom(const PostTweetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minitwitter.PostTweetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTweetRequest::IsInitialized() const {
  return true;
}

void PostTweetRequest::InternalSwap(PostTweetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.tweet_, other->_impl_.tweet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostTweetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minitwitter_2eproto_getter, &descriptor_table_minitwitter_2eproto_once,
      file_level_metadata_minitwitter_2eproto[7]);
}

// ===================================================================

class PostTweetResponse::_Internal {
 public:
};

PostTweetResponse::PostTweetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minitwitter.PostTweetResponse)
}
PostTweetResponse::PostTweetResponse(const PostTweetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostTweetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:minitwitter.PostTweetResponse)
}

inline void PostTweetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostTweetResponse::~PostTweetResponse() {
  // @@protoc_insertion_point(destructor:minitwitter.PostTweetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostTweetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PostTweetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostTweetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minitwitter.PostTweetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostTweetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostTweetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minitwitter.PostTweetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minitwitter.PostTweetResponse)
  return target;
}

size_t PostTweetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minitwitter.PostTweetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostTweetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostTweetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostTweetResponse::GetClassData() const { return &_class_data_; }


void PostTweetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostTweetResponse*>(&to_msg);
  auto& from = static_cast<const PostTweetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minitwitter.PostTweetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostTweetResponse::CopyFrom(const PostTweetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minitwitter.PostTweetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTweetResponse::IsInitialized() const {
  return true;
}

void PostTweetResponse::InternalSwap(PostTweetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostTweetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minitwitter_2eproto_getter, &descriptor_table_minitwitter_2eproto_once,
      file_level_metadata_minitwitter_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace minitwitter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minitwitter::Tweet*
Arena::CreateMaybeMessage< ::minitwitter::Tweet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minitwitter::Tweet >(arena);
}
template<> PROTOBUF_NOINLINE ::minitwitter::LogInRequest*
Arena::CreateMaybeMessage< ::minitwitter::LogInRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minitwitter::LogInRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minitwitter::LogInResponse*
Arena::CreateMaybeMessage< ::minitwitter::LogInResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minitwitter::LogInResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minitwitter::LogOutRequest*
Arena::CreateMaybeMessage< ::minitwitter::LogOutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minitwitter::LogOutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minitwitter::LogOutResponse*
Arena::CreateMaybeMessage< ::minitwitter::LogOutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minitwitter::LogOutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minitwitter::GetTweetsRequest*
Arena::CreateMaybeMessage< ::minitwitter::GetTweetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minitwitter::GetTweetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minitwitter::GetTweetsResponse*
Arena::CreateMaybeMessage< ::minitwitter::GetTweetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minitwitter::GetTweetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minitwitter::PostTweetRequest*
Arena::CreateMaybeMessage< ::minitwitter::PostTweetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minitwitter::PostTweetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minitwitter::PostTweetResponse*
Arena::CreateMaybeMessage< ::minitwitter::PostTweetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minitwitter::PostTweetResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
