// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minitwitter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minitwitter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_minitwitter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_minitwitter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_minitwitter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minitwitter_2eproto;
namespace minitwitter {
class GetTweetsRequest;
struct GetTweetsRequestDefaultTypeInternal;
extern GetTweetsRequestDefaultTypeInternal _GetTweetsRequest_default_instance_;
class GetTweetsResponse;
struct GetTweetsResponseDefaultTypeInternal;
extern GetTweetsResponseDefaultTypeInternal _GetTweetsResponse_default_instance_;
class LogInRequest;
struct LogInRequestDefaultTypeInternal;
extern LogInRequestDefaultTypeInternal _LogInRequest_default_instance_;
class LogInResponse;
struct LogInResponseDefaultTypeInternal;
extern LogInResponseDefaultTypeInternal _LogInResponse_default_instance_;
class LogOutRequest;
struct LogOutRequestDefaultTypeInternal;
extern LogOutRequestDefaultTypeInternal _LogOutRequest_default_instance_;
class LogOutResponse;
struct LogOutResponseDefaultTypeInternal;
extern LogOutResponseDefaultTypeInternal _LogOutResponse_default_instance_;
class PostTweetRequest;
struct PostTweetRequestDefaultTypeInternal;
extern PostTweetRequestDefaultTypeInternal _PostTweetRequest_default_instance_;
class PostTweetResponse;
struct PostTweetResponseDefaultTypeInternal;
extern PostTweetResponseDefaultTypeInternal _PostTweetResponse_default_instance_;
class Tweet;
struct TweetDefaultTypeInternal;
extern TweetDefaultTypeInternal _Tweet_default_instance_;
}  // namespace minitwitter
PROTOBUF_NAMESPACE_OPEN
template<> ::minitwitter::GetTweetsRequest* Arena::CreateMaybeMessage<::minitwitter::GetTweetsRequest>(Arena*);
template<> ::minitwitter::GetTweetsResponse* Arena::CreateMaybeMessage<::minitwitter::GetTweetsResponse>(Arena*);
template<> ::minitwitter::LogInRequest* Arena::CreateMaybeMessage<::minitwitter::LogInRequest>(Arena*);
template<> ::minitwitter::LogInResponse* Arena::CreateMaybeMessage<::minitwitter::LogInResponse>(Arena*);
template<> ::minitwitter::LogOutRequest* Arena::CreateMaybeMessage<::minitwitter::LogOutRequest>(Arena*);
template<> ::minitwitter::LogOutResponse* Arena::CreateMaybeMessage<::minitwitter::LogOutResponse>(Arena*);
template<> ::minitwitter::PostTweetRequest* Arena::CreateMaybeMessage<::minitwitter::PostTweetRequest>(Arena*);
template<> ::minitwitter::PostTweetResponse* Arena::CreateMaybeMessage<::minitwitter::PostTweetResponse>(Arena*);
template<> ::minitwitter::Tweet* Arena::CreateMaybeMessage<::minitwitter::Tweet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minitwitter {

// ===================================================================

class Tweet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minitwitter.Tweet) */ {
 public:
  inline Tweet() : Tweet(nullptr) {}
  ~Tweet() override;
  explicit PROTOBUF_CONSTEXPR Tweet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tweet(const Tweet& from);
  Tweet(Tweet&& from) noexcept
    : Tweet() {
    *this = ::std::move(from);
  }

  inline Tweet& operator=(const Tweet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tweet& operator=(Tweet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tweet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tweet* internal_default_instance() {
    return reinterpret_cast<const Tweet*>(
               &_Tweet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Tweet& a, Tweet& b) {
    a.Swap(&b);
  }
  inline void Swap(Tweet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tweet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tweet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tweet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Tweet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Tweet& from) {
    Tweet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tweet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minitwitter.Tweet";
  }
  protected:
  explicit Tweet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:minitwitter.Tweet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minitwitter_2eproto;
};
// -------------------------------------------------------------------

class LogInRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minitwitter.LogInRequest) */ {
 public:
  inline LogInRequest() : LogInRequest(nullptr) {}
  ~LogInRequest() override;
  explicit PROTOBUF_CONSTEXPR LogInRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogInRequest(const LogInRequest& from);
  LogInRequest(LogInRequest&& from) noexcept
    : LogInRequest() {
    *this = ::std::move(from);
  }

  inline LogInRequest& operator=(const LogInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogInRequest& operator=(LogInRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogInRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogInRequest* internal_default_instance() {
    return reinterpret_cast<const LogInRequest*>(
               &_LogInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogInRequest& a, LogInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogInRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogInRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogInRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogInRequest& from) {
    LogInRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogInRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minitwitter.LogInRequest";
  }
  protected:
  explicit LogInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // @@protoc_insertion_point(class_scope:minitwitter.LogInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minitwitter_2eproto;
};
// -------------------------------------------------------------------

class LogInResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minitwitter.LogInResponse) */ {
 public:
  inline LogInResponse() : LogInResponse(nullptr) {}
  ~LogInResponse() override;
  explicit PROTOBUF_CONSTEXPR LogInResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogInResponse(const LogInResponse& from);
  LogInResponse(LogInResponse&& from) noexcept
    : LogInResponse() {
    *this = ::std::move(from);
  }

  inline LogInResponse& operator=(const LogInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogInResponse& operator=(LogInResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogInResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogInResponse* internal_default_instance() {
    return reinterpret_cast<const LogInResponse*>(
               &_LogInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogInResponse& a, LogInResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogInResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogInResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogInResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogInResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogInResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogInResponse& from) {
    LogInResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogInResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minitwitter.LogInResponse";
  }
  protected:
  explicit LogInResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // int32 success = 1;
  void clear_success();
  int32_t success() const;
  void set_success(int32_t value);
  private:
  int32_t _internal_success() const;
  void _internal_set_success(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minitwitter.LogInResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minitwitter_2eproto;
};
// -------------------------------------------------------------------

class LogOutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minitwitter.LogOutRequest) */ {
 public:
  inline LogOutRequest() : LogOutRequest(nullptr) {}
  ~LogOutRequest() override;
  explicit PROTOBUF_CONSTEXPR LogOutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogOutRequest(const LogOutRequest& from);
  LogOutRequest(LogOutRequest&& from) noexcept
    : LogOutRequest() {
    *this = ::std::move(from);
  }

  inline LogOutRequest& operator=(const LogOutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogOutRequest& operator=(LogOutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogOutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogOutRequest* internal_default_instance() {
    return reinterpret_cast<const LogOutRequest*>(
               &_LogOutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogOutRequest& a, LogOutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogOutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogOutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogOutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogOutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogOutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogOutRequest& from) {
    LogOutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogOutRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minitwitter.LogOutRequest";
  }
  protected:
  explicit LogOutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // @@protoc_insertion_point(class_scope:minitwitter.LogOutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minitwitter_2eproto;
};
// -------------------------------------------------------------------

class LogOutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minitwitter.LogOutResponse) */ {
 public:
  inline LogOutResponse() : LogOutResponse(nullptr) {}
  ~LogOutResponse() override;
  explicit PROTOBUF_CONSTEXPR LogOutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogOutResponse(const LogOutResponse& from);
  LogOutResponse(LogOutResponse&& from) noexcept
    : LogOutResponse() {
    *this = ::std::move(from);
  }

  inline LogOutResponse& operator=(const LogOutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogOutResponse& operator=(LogOutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogOutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogOutResponse* internal_default_instance() {
    return reinterpret_cast<const LogOutResponse*>(
               &_LogOutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogOutResponse& a, LogOutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogOutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogOutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogOutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogOutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogOutResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogOutResponse& from) {
    LogOutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogOutResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minitwitter.LogOutResponse";
  }
  protected:
  explicit LogOutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // int32 success = 1;
  void clear_success();
  int32_t success() const;
  void set_success(int32_t value);
  private:
  int32_t _internal_success() const;
  void _internal_set_success(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minitwitter.LogOutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minitwitter_2eproto;
};
// -------------------------------------------------------------------

class GetTweetsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minitwitter.GetTweetsRequest) */ {
 public:
  inline GetTweetsRequest() : GetTweetsRequest(nullptr) {}
  ~GetTweetsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetTweetsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTweetsRequest(const GetTweetsRequest& from);
  GetTweetsRequest(GetTweetsRequest&& from) noexcept
    : GetTweetsRequest() {
    *this = ::std::move(from);
  }

  inline GetTweetsRequest& operator=(const GetTweetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTweetsRequest& operator=(GetTweetsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTweetsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTweetsRequest* internal_default_instance() {
    return reinterpret_cast<const GetTweetsRequest*>(
               &_GetTweetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetTweetsRequest& a, GetTweetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTweetsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTweetsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTweetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTweetsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTweetsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTweetsRequest& from) {
    GetTweetsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTweetsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minitwitter.GetTweetsRequest";
  }
  protected:
  explicit GetTweetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kNFieldNumber = 2,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // int32 n = 2;
  void clear_n();
  int32_t n() const;
  void set_n(int32_t value);
  private:
  int32_t _internal_n() const;
  void _internal_set_n(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minitwitter.GetTweetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    int32_t n_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minitwitter_2eproto;
};
// -------------------------------------------------------------------

class GetTweetsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minitwitter.GetTweetsResponse) */ {
 public:
  inline GetTweetsResponse() : GetTweetsResponse(nullptr) {}
  ~GetTweetsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetTweetsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTweetsResponse(const GetTweetsResponse& from);
  GetTweetsResponse(GetTweetsResponse&& from) noexcept
    : GetTweetsResponse() {
    *this = ::std::move(from);
  }

  inline GetTweetsResponse& operator=(const GetTweetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTweetsResponse& operator=(GetTweetsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTweetsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTweetsResponse* internal_default_instance() {
    return reinterpret_cast<const GetTweetsResponse*>(
               &_GetTweetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetTweetsResponse& a, GetTweetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTweetsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTweetsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTweetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTweetsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTweetsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTweetsResponse& from) {
    GetTweetsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTweetsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minitwitter.GetTweetsResponse";
  }
  protected:
  explicit GetTweetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTweetsFieldNumber = 1,
  };
  // repeated .minitwitter.Tweet tweets = 1;
  int tweets_size() const;
  private:
  int _internal_tweets_size() const;
  public:
  void clear_tweets();
  ::minitwitter::Tweet* mutable_tweets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minitwitter::Tweet >*
      mutable_tweets();
  private:
  const ::minitwitter::Tweet& _internal_tweets(int index) const;
  ::minitwitter::Tweet* _internal_add_tweets();
  public:
  const ::minitwitter::Tweet& tweets(int index) const;
  ::minitwitter::Tweet* add_tweets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minitwitter::Tweet >&
      tweets() const;

  // @@protoc_insertion_point(class_scope:minitwitter.GetTweetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minitwitter::Tweet > tweets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minitwitter_2eproto;
};
// -------------------------------------------------------------------

class PostTweetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minitwitter.PostTweetRequest) */ {
 public:
  inline PostTweetRequest() : PostTweetRequest(nullptr) {}
  ~PostTweetRequest() override;
  explicit PROTOBUF_CONSTEXPR PostTweetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostTweetRequest(const PostTweetRequest& from);
  PostTweetRequest(PostTweetRequest&& from) noexcept
    : PostTweetRequest() {
    *this = ::std::move(from);
  }

  inline PostTweetRequest& operator=(const PostTweetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostTweetRequest& operator=(PostTweetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostTweetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostTweetRequest* internal_default_instance() {
    return reinterpret_cast<const PostTweetRequest*>(
               &_PostTweetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PostTweetRequest& a, PostTweetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostTweetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostTweetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostTweetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostTweetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostTweetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PostTweetRequest& from) {
    PostTweetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostTweetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minitwitter.PostTweetRequest";
  }
  protected:
  explicit PostTweetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTweetFieldNumber = 1,
  };
  // .minitwitter.Tweet tweet = 1;
  bool has_tweet() const;
  private:
  bool _internal_has_tweet() const;
  public:
  void clear_tweet();
  const ::minitwitter::Tweet& tweet() const;
  PROTOBUF_NODISCARD ::minitwitter::Tweet* release_tweet();
  ::minitwitter::Tweet* mutable_tweet();
  void set_allocated_tweet(::minitwitter::Tweet* tweet);
  private:
  const ::minitwitter::Tweet& _internal_tweet() const;
  ::minitwitter::Tweet* _internal_mutable_tweet();
  public:
  void unsafe_arena_set_allocated_tweet(
      ::minitwitter::Tweet* tweet);
  ::minitwitter::Tweet* unsafe_arena_release_tweet();

  // @@protoc_insertion_point(class_scope:minitwitter.PostTweetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::minitwitter::Tweet* tweet_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minitwitter_2eproto;
};
// -------------------------------------------------------------------

class PostTweetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minitwitter.PostTweetResponse) */ {
 public:
  inline PostTweetResponse() : PostTweetResponse(nullptr) {}
  ~PostTweetResponse() override;
  explicit PROTOBUF_CONSTEXPR PostTweetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostTweetResponse(const PostTweetResponse& from);
  PostTweetResponse(PostTweetResponse&& from) noexcept
    : PostTweetResponse() {
    *this = ::std::move(from);
  }

  inline PostTweetResponse& operator=(const PostTweetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostTweetResponse& operator=(PostTweetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostTweetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostTweetResponse* internal_default_instance() {
    return reinterpret_cast<const PostTweetResponse*>(
               &_PostTweetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PostTweetResponse& a, PostTweetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostTweetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostTweetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostTweetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostTweetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostTweetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PostTweetResponse& from) {
    PostTweetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostTweetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minitwitter.PostTweetResponse";
  }
  protected:
  explicit PostTweetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minitwitter.PostTweetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minitwitter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tweet

// string user = 1;
inline void Tweet::clear_user() {
  _impl_.user_.ClearToEmpty();
}
inline const std::string& Tweet::user() const {
  // @@protoc_insertion_point(field_get:minitwitter.Tweet.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Tweet::set_user(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minitwitter.Tweet.user)
}
inline std::string* Tweet::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:minitwitter.Tweet.user)
  return _s;
}
inline const std::string& Tweet::_internal_user() const {
  return _impl_.user_.Get();
}
inline void Tweet::_internal_set_user(const std::string& value) {
  
  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* Tweet::_internal_mutable_user() {
  
  return _impl_.user_.Mutable(GetArenaForAllocation());
}
inline std::string* Tweet::release_user() {
  // @@protoc_insertion_point(field_release:minitwitter.Tweet.user)
  return _impl_.user_.Release();
}
inline void Tweet::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  _impl_.user_.SetAllocated(user, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:minitwitter.Tweet.user)
}

// string text = 2;
inline void Tweet::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Tweet::text() const {
  // @@protoc_insertion_point(field_get:minitwitter.Tweet.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Tweet::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minitwitter.Tweet.text)
}
inline std::string* Tweet::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:minitwitter.Tweet.text)
  return _s;
}
inline const std::string& Tweet::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Tweet::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Tweet::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Tweet::release_text() {
  // @@protoc_insertion_point(field_release:minitwitter.Tweet.text)
  return _impl_.text_.Release();
}
inline void Tweet::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:minitwitter.Tweet.text)
}

// -------------------------------------------------------------------

// LogInRequest

// string user = 1;
inline void LogInRequest::clear_user() {
  _impl_.user_.ClearToEmpty();
}
inline const std::string& LogInRequest::user() const {
  // @@protoc_insertion_point(field_get:minitwitter.LogInRequest.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogInRequest::set_user(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minitwitter.LogInRequest.user)
}
inline std::string* LogInRequest::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:minitwitter.LogInRequest.user)
  return _s;
}
inline const std::string& LogInRequest::_internal_user() const {
  return _impl_.user_.Get();
}
inline void LogInRequest::_internal_set_user(const std::string& value) {
  
  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* LogInRequest::_internal_mutable_user() {
  
  return _impl_.user_.Mutable(GetArenaForAllocation());
}
inline std::string* LogInRequest::release_user() {
  // @@protoc_insertion_point(field_release:minitwitter.LogInRequest.user)
  return _impl_.user_.Release();
}
inline void LogInRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  _impl_.user_.SetAllocated(user, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:minitwitter.LogInRequest.user)
}

// -------------------------------------------------------------------

// LogInResponse

// int32 success = 1;
inline void LogInResponse::clear_success() {
  _impl_.success_ = 0;
}
inline int32_t LogInResponse::_internal_success() const {
  return _impl_.success_;
}
inline int32_t LogInResponse::success() const {
  // @@protoc_insertion_point(field_get:minitwitter.LogInResponse.success)
  return _internal_success();
}
inline void LogInResponse::_internal_set_success(int32_t value) {
  
  _impl_.success_ = value;
}
inline void LogInResponse::set_success(int32_t value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:minitwitter.LogInResponse.success)
}

// -------------------------------------------------------------------

// LogOutRequest

// string user = 1;
inline void LogOutRequest::clear_user() {
  _impl_.user_.ClearToEmpty();
}
inline const std::string& LogOutRequest::user() const {
  // @@protoc_insertion_point(field_get:minitwitter.LogOutRequest.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogOutRequest::set_user(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minitwitter.LogOutRequest.user)
}
inline std::string* LogOutRequest::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:minitwitter.LogOutRequest.user)
  return _s;
}
inline const std::string& LogOutRequest::_internal_user() const {
  return _impl_.user_.Get();
}
inline void LogOutRequest::_internal_set_user(const std::string& value) {
  
  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* LogOutRequest::_internal_mutable_user() {
  
  return _impl_.user_.Mutable(GetArenaForAllocation());
}
inline std::string* LogOutRequest::release_user() {
  // @@protoc_insertion_point(field_release:minitwitter.LogOutRequest.user)
  return _impl_.user_.Release();
}
inline void LogOutRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  _impl_.user_.SetAllocated(user, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:minitwitter.LogOutRequest.user)
}

// -------------------------------------------------------------------

// LogOutResponse

// int32 success = 1;
inline void LogOutResponse::clear_success() {
  _impl_.success_ = 0;
}
inline int32_t LogOutResponse::_internal_success() const {
  return _impl_.success_;
}
inline int32_t LogOutResponse::success() const {
  // @@protoc_insertion_point(field_get:minitwitter.LogOutResponse.success)
  return _internal_success();
}
inline void LogOutResponse::_internal_set_success(int32_t value) {
  
  _impl_.success_ = value;
}
inline void LogOutResponse::set_success(int32_t value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:minitwitter.LogOutResponse.success)
}

// -------------------------------------------------------------------

// GetTweetsRequest

// string user = 1;
inline void GetTweetsRequest::clear_user() {
  _impl_.user_.ClearToEmpty();
}
inline const std::string& GetTweetsRequest::user() const {
  // @@protoc_insertion_point(field_get:minitwitter.GetTweetsRequest.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTweetsRequest::set_user(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minitwitter.GetTweetsRequest.user)
}
inline std::string* GetTweetsRequest::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:minitwitter.GetTweetsRequest.user)
  return _s;
}
inline const std::string& GetTweetsRequest::_internal_user() const {
  return _impl_.user_.Get();
}
inline void GetTweetsRequest::_internal_set_user(const std::string& value) {
  
  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTweetsRequest::_internal_mutable_user() {
  
  return _impl_.user_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTweetsRequest::release_user() {
  // @@protoc_insertion_point(field_release:minitwitter.GetTweetsRequest.user)
  return _impl_.user_.Release();
}
inline void GetTweetsRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  _impl_.user_.SetAllocated(user, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:minitwitter.GetTweetsRequest.user)
}

// int32 n = 2;
inline void GetTweetsRequest::clear_n() {
  _impl_.n_ = 0;
}
inline int32_t GetTweetsRequest::_internal_n() const {
  return _impl_.n_;
}
inline int32_t GetTweetsRequest::n() const {
  // @@protoc_insertion_point(field_get:minitwitter.GetTweetsRequest.n)
  return _internal_n();
}
inline void GetTweetsRequest::_internal_set_n(int32_t value) {
  
  _impl_.n_ = value;
}
inline void GetTweetsRequest::set_n(int32_t value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:minitwitter.GetTweetsRequest.n)
}

// -------------------------------------------------------------------

// GetTweetsResponse

// repeated .minitwitter.Tweet tweets = 1;
inline int GetTweetsResponse::_internal_tweets_size() const {
  return _impl_.tweets_.size();
}
inline int GetTweetsResponse::tweets_size() const {
  return _internal_tweets_size();
}
inline void GetTweetsResponse::clear_tweets() {
  _impl_.tweets_.Clear();
}
inline ::minitwitter::Tweet* GetTweetsResponse::mutable_tweets(int index) {
  // @@protoc_insertion_point(field_mutable:minitwitter.GetTweetsResponse.tweets)
  return _impl_.tweets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minitwitter::Tweet >*
GetTweetsResponse::mutable_tweets() {
  // @@protoc_insertion_point(field_mutable_list:minitwitter.GetTweetsResponse.tweets)
  return &_impl_.tweets_;
}
inline const ::minitwitter::Tweet& GetTweetsResponse::_internal_tweets(int index) const {
  return _impl_.tweets_.Get(index);
}
inline const ::minitwitter::Tweet& GetTweetsResponse::tweets(int index) const {
  // @@protoc_insertion_point(field_get:minitwitter.GetTweetsResponse.tweets)
  return _internal_tweets(index);
}
inline ::minitwitter::Tweet* GetTweetsResponse::_internal_add_tweets() {
  return _impl_.tweets_.Add();
}
inline ::minitwitter::Tweet* GetTweetsResponse::add_tweets() {
  ::minitwitter::Tweet* _add = _internal_add_tweets();
  // @@protoc_insertion_point(field_add:minitwitter.GetTweetsResponse.tweets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minitwitter::Tweet >&
GetTweetsResponse::tweets() const {
  // @@protoc_insertion_point(field_list:minitwitter.GetTweetsResponse.tweets)
  return _impl_.tweets_;
}

// -------------------------------------------------------------------

// PostTweetRequest

// .minitwitter.Tweet tweet = 1;
inline bool PostTweetRequest::_internal_has_tweet() const {
  return this != internal_default_instance() && _impl_.tweet_ != nullptr;
}
inline bool PostTweetRequest::has_tweet() const {
  return _internal_has_tweet();
}
inline void PostTweetRequest::clear_tweet() {
  if (GetArenaForAllocation() == nullptr && _impl_.tweet_ != nullptr) {
    delete _impl_.tweet_;
  }
  _impl_.tweet_ = nullptr;
}
inline const ::minitwitter::Tweet& PostTweetRequest::_internal_tweet() const {
  const ::minitwitter::Tweet* p = _impl_.tweet_;
  return p != nullptr ? *p : reinterpret_cast<const ::minitwitter::Tweet&>(
      ::minitwitter::_Tweet_default_instance_);
}
inline const ::minitwitter::Tweet& PostTweetRequest::tweet() const {
  // @@protoc_insertion_point(field_get:minitwitter.PostTweetRequest.tweet)
  return _internal_tweet();
}
inline void PostTweetRequest::unsafe_arena_set_allocated_tweet(
    ::minitwitter::Tweet* tweet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tweet_);
  }
  _impl_.tweet_ = tweet;
  if (tweet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minitwitter.PostTweetRequest.tweet)
}
inline ::minitwitter::Tweet* PostTweetRequest::release_tweet() {
  
  ::minitwitter::Tweet* temp = _impl_.tweet_;
  _impl_.tweet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minitwitter::Tweet* PostTweetRequest::unsafe_arena_release_tweet() {
  // @@protoc_insertion_point(field_release:minitwitter.PostTweetRequest.tweet)
  
  ::minitwitter::Tweet* temp = _impl_.tweet_;
  _impl_.tweet_ = nullptr;
  return temp;
}
inline ::minitwitter::Tweet* PostTweetRequest::_internal_mutable_tweet() {
  
  if (_impl_.tweet_ == nullptr) {
    auto* p = CreateMaybeMessage<::minitwitter::Tweet>(GetArenaForAllocation());
    _impl_.tweet_ = p;
  }
  return _impl_.tweet_;
}
inline ::minitwitter::Tweet* PostTweetRequest::mutable_tweet() {
  ::minitwitter::Tweet* _msg = _internal_mutable_tweet();
  // @@protoc_insertion_point(field_mutable:minitwitter.PostTweetRequest.tweet)
  return _msg;
}
inline void PostTweetRequest::set_allocated_tweet(::minitwitter::Tweet* tweet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tweet_;
  }
  if (tweet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tweet);
    if (message_arena != submessage_arena) {
      tweet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tweet, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tweet_ = tweet;
  // @@protoc_insertion_point(field_set_allocated:minitwitter.PostTweetRequest.tweet)
}

// -------------------------------------------------------------------

// PostTweetResponse

// bool success = 1;
inline void PostTweetResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool PostTweetResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool PostTweetResponse::success() const {
  // @@protoc_insertion_point(field_get:minitwitter.PostTweetResponse.success)
  return _internal_success();
}
inline void PostTweetResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void PostTweetResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:minitwitter.PostTweetResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minitwitter

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_minitwitter_2eproto
