// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: minitwitter.proto
#ifndef GRPC_minitwitter_2eproto__INCLUDED
#define GRPC_minitwitter_2eproto__INCLUDED

#include "minitwitter.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace minitwitter {

// The Twitter service definition
class MiniTwitter final {
 public:
  static constexpr char const* service_full_name() {
    return "minitwitter.MiniTwitter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Returns n last Tweets
    virtual ::grpc::Status PostTweet(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest& request, ::minitwitter::PostTweetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::PostTweetResponse>> AsyncPostTweet(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::PostTweetResponse>>(AsyncPostTweetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::PostTweetResponse>> PrepareAsyncPostTweet(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::PostTweetResponse>>(PrepareAsyncPostTweetRaw(context, request, cq));
    }
    // Posts a tweet on behalf of the specified user
    virtual ::grpc::Status GetTweets(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest& request, ::minitwitter::GetTweetsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::GetTweetsResponse>> AsyncGetTweets(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::GetTweetsResponse>>(AsyncGetTweetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::GetTweetsResponse>> PrepareAsyncGetTweets(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::GetTweetsResponse>>(PrepareAsyncGetTweetsRaw(context, request, cq));
    }
    // Logs in specified user
    virtual ::grpc::Status LogIn(::grpc::ClientContext* context, const ::minitwitter::LogInRequest& request, ::minitwitter::LogInResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::LogInResponse>> AsyncLogIn(::grpc::ClientContext* context, const ::minitwitter::LogInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::LogInResponse>>(AsyncLogInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::LogInResponse>> PrepareAsyncLogIn(::grpc::ClientContext* context, const ::minitwitter::LogInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::LogInResponse>>(PrepareAsyncLogInRaw(context, request, cq));
    }
    // Logs out specified user
    virtual ::grpc::Status LogOut(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest& request, ::minitwitter::LogOutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::LogOutResponse>> AsyncLogOut(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::LogOutResponse>>(AsyncLogOutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::LogOutResponse>> PrepareAsyncLogOut(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::LogOutResponse>>(PrepareAsyncLogOutRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Returns n last Tweets
      virtual void PostTweet(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest* request, ::minitwitter::PostTweetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostTweet(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest* request, ::minitwitter::PostTweetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Posts a tweet on behalf of the specified user
      virtual void GetTweets(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest* request, ::minitwitter::GetTweetsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTweets(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest* request, ::minitwitter::GetTweetsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Logs in specified user
      virtual void LogIn(::grpc::ClientContext* context, const ::minitwitter::LogInRequest* request, ::minitwitter::LogInResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LogIn(::grpc::ClientContext* context, const ::minitwitter::LogInRequest* request, ::minitwitter::LogInResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Logs out specified user
      virtual void LogOut(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest* request, ::minitwitter::LogOutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LogOut(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest* request, ::minitwitter::LogOutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::PostTweetResponse>* AsyncPostTweetRaw(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::PostTweetResponse>* PrepareAsyncPostTweetRaw(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::GetTweetsResponse>* AsyncGetTweetsRaw(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::GetTweetsResponse>* PrepareAsyncGetTweetsRaw(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::LogInResponse>* AsyncLogInRaw(::grpc::ClientContext* context, const ::minitwitter::LogInRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::LogInResponse>* PrepareAsyncLogInRaw(::grpc::ClientContext* context, const ::minitwitter::LogInRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::LogOutResponse>* AsyncLogOutRaw(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minitwitter::LogOutResponse>* PrepareAsyncLogOutRaw(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PostTweet(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest& request, ::minitwitter::PostTweetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::PostTweetResponse>> AsyncPostTweet(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::PostTweetResponse>>(AsyncPostTweetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::PostTweetResponse>> PrepareAsyncPostTweet(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::PostTweetResponse>>(PrepareAsyncPostTweetRaw(context, request, cq));
    }
    ::grpc::Status GetTweets(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest& request, ::minitwitter::GetTweetsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::GetTweetsResponse>> AsyncGetTweets(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::GetTweetsResponse>>(AsyncGetTweetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::GetTweetsResponse>> PrepareAsyncGetTweets(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::GetTweetsResponse>>(PrepareAsyncGetTweetsRaw(context, request, cq));
    }
    ::grpc::Status LogIn(::grpc::ClientContext* context, const ::minitwitter::LogInRequest& request, ::minitwitter::LogInResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::LogInResponse>> AsyncLogIn(::grpc::ClientContext* context, const ::minitwitter::LogInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::LogInResponse>>(AsyncLogInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::LogInResponse>> PrepareAsyncLogIn(::grpc::ClientContext* context, const ::minitwitter::LogInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::LogInResponse>>(PrepareAsyncLogInRaw(context, request, cq));
    }
    ::grpc::Status LogOut(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest& request, ::minitwitter::LogOutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::LogOutResponse>> AsyncLogOut(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::LogOutResponse>>(AsyncLogOutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::LogOutResponse>> PrepareAsyncLogOut(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minitwitter::LogOutResponse>>(PrepareAsyncLogOutRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PostTweet(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest* request, ::minitwitter::PostTweetResponse* response, std::function<void(::grpc::Status)>) override;
      void PostTweet(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest* request, ::minitwitter::PostTweetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTweets(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest* request, ::minitwitter::GetTweetsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTweets(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest* request, ::minitwitter::GetTweetsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LogIn(::grpc::ClientContext* context, const ::minitwitter::LogInRequest* request, ::minitwitter::LogInResponse* response, std::function<void(::grpc::Status)>) override;
      void LogIn(::grpc::ClientContext* context, const ::minitwitter::LogInRequest* request, ::minitwitter::LogInResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LogOut(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest* request, ::minitwitter::LogOutResponse* response, std::function<void(::grpc::Status)>) override;
      void LogOut(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest* request, ::minitwitter::LogOutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::minitwitter::PostTweetResponse>* AsyncPostTweetRaw(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minitwitter::PostTweetResponse>* PrepareAsyncPostTweetRaw(::grpc::ClientContext* context, const ::minitwitter::PostTweetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minitwitter::GetTweetsResponse>* AsyncGetTweetsRaw(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minitwitter::GetTweetsResponse>* PrepareAsyncGetTweetsRaw(::grpc::ClientContext* context, const ::minitwitter::GetTweetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minitwitter::LogInResponse>* AsyncLogInRaw(::grpc::ClientContext* context, const ::minitwitter::LogInRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minitwitter::LogInResponse>* PrepareAsyncLogInRaw(::grpc::ClientContext* context, const ::minitwitter::LogInRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minitwitter::LogOutResponse>* AsyncLogOutRaw(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minitwitter::LogOutResponse>* PrepareAsyncLogOutRaw(::grpc::ClientContext* context, const ::minitwitter::LogOutRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PostTweet_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTweets_;
    const ::grpc::internal::RpcMethod rpcmethod_LogIn_;
    const ::grpc::internal::RpcMethod rpcmethod_LogOut_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Returns n last Tweets
    virtual ::grpc::Status PostTweet(::grpc::ServerContext* context, const ::minitwitter::PostTweetRequest* request, ::minitwitter::PostTweetResponse* response);
    // Posts a tweet on behalf of the specified user
    virtual ::grpc::Status GetTweets(::grpc::ServerContext* context, const ::minitwitter::GetTweetsRequest* request, ::minitwitter::GetTweetsResponse* response);
    // Logs in specified user
    virtual ::grpc::Status LogIn(::grpc::ServerContext* context, const ::minitwitter::LogInRequest* request, ::minitwitter::LogInResponse* response);
    // Logs out specified user
    virtual ::grpc::Status LogOut(::grpc::ServerContext* context, const ::minitwitter::LogOutRequest* request, ::minitwitter::LogOutResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PostTweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostTweet() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PostTweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTweet(::grpc::ServerContext* /*context*/, const ::minitwitter::PostTweetRequest* /*request*/, ::minitwitter::PostTweetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostTweet(::grpc::ServerContext* context, ::minitwitter::PostTweetRequest* request, ::grpc::ServerAsyncResponseWriter< ::minitwitter::PostTweetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTweets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTweets() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTweets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTweets(::grpc::ServerContext* /*context*/, const ::minitwitter::GetTweetsRequest* /*request*/, ::minitwitter::GetTweetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTweets(::grpc::ServerContext* context, ::minitwitter::GetTweetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::minitwitter::GetTweetsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LogIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LogIn() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_LogIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogIn(::grpc::ServerContext* /*context*/, const ::minitwitter::LogInRequest* /*request*/, ::minitwitter::LogInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogIn(::grpc::ServerContext* context, ::minitwitter::LogInRequest* request, ::grpc::ServerAsyncResponseWriter< ::minitwitter::LogInResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LogOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LogOut() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LogOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogOut(::grpc::ServerContext* /*context*/, const ::minitwitter::LogOutRequest* /*request*/, ::minitwitter::LogOutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogOut(::grpc::ServerContext* context, ::minitwitter::LogOutRequest* request, ::grpc::ServerAsyncResponseWriter< ::minitwitter::LogOutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PostTweet<WithAsyncMethod_GetTweets<WithAsyncMethod_LogIn<WithAsyncMethod_LogOut<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PostTweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PostTweet() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::minitwitter::PostTweetRequest, ::minitwitter::PostTweetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minitwitter::PostTweetRequest* request, ::minitwitter::PostTweetResponse* response) { return this->PostTweet(context, request, response); }));}
    void SetMessageAllocatorFor_PostTweet(
        ::grpc::MessageAllocator< ::minitwitter::PostTweetRequest, ::minitwitter::PostTweetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minitwitter::PostTweetRequest, ::minitwitter::PostTweetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PostTweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTweet(::grpc::ServerContext* /*context*/, const ::minitwitter::PostTweetRequest* /*request*/, ::minitwitter::PostTweetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostTweet(
      ::grpc::CallbackServerContext* /*context*/, const ::minitwitter::PostTweetRequest* /*request*/, ::minitwitter::PostTweetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTweets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTweets() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::minitwitter::GetTweetsRequest, ::minitwitter::GetTweetsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minitwitter::GetTweetsRequest* request, ::minitwitter::GetTweetsResponse* response) { return this->GetTweets(context, request, response); }));}
    void SetMessageAllocatorFor_GetTweets(
        ::grpc::MessageAllocator< ::minitwitter::GetTweetsRequest, ::minitwitter::GetTweetsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minitwitter::GetTweetsRequest, ::minitwitter::GetTweetsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTweets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTweets(::grpc::ServerContext* /*context*/, const ::minitwitter::GetTweetsRequest* /*request*/, ::minitwitter::GetTweetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTweets(
      ::grpc::CallbackServerContext* /*context*/, const ::minitwitter::GetTweetsRequest* /*request*/, ::minitwitter::GetTweetsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LogIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LogIn() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::minitwitter::LogInRequest, ::minitwitter::LogInResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minitwitter::LogInRequest* request, ::minitwitter::LogInResponse* response) { return this->LogIn(context, request, response); }));}
    void SetMessageAllocatorFor_LogIn(
        ::grpc::MessageAllocator< ::minitwitter::LogInRequest, ::minitwitter::LogInResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minitwitter::LogInRequest, ::minitwitter::LogInResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LogIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogIn(::grpc::ServerContext* /*context*/, const ::minitwitter::LogInRequest* /*request*/, ::minitwitter::LogInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogIn(
      ::grpc::CallbackServerContext* /*context*/, const ::minitwitter::LogInRequest* /*request*/, ::minitwitter::LogInResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LogOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LogOut() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::minitwitter::LogOutRequest, ::minitwitter::LogOutResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minitwitter::LogOutRequest* request, ::minitwitter::LogOutResponse* response) { return this->LogOut(context, request, response); }));}
    void SetMessageAllocatorFor_LogOut(
        ::grpc::MessageAllocator< ::minitwitter::LogOutRequest, ::minitwitter::LogOutResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minitwitter::LogOutRequest, ::minitwitter::LogOutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LogOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogOut(::grpc::ServerContext* /*context*/, const ::minitwitter::LogOutRequest* /*request*/, ::minitwitter::LogOutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogOut(
      ::grpc::CallbackServerContext* /*context*/, const ::minitwitter::LogOutRequest* /*request*/, ::minitwitter::LogOutResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PostTweet<WithCallbackMethod_GetTweets<WithCallbackMethod_LogIn<WithCallbackMethod_LogOut<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PostTweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostTweet() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PostTweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTweet(::grpc::ServerContext* /*context*/, const ::minitwitter::PostTweetRequest* /*request*/, ::minitwitter::PostTweetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTweets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTweets() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTweets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTweets(::grpc::ServerContext* /*context*/, const ::minitwitter::GetTweetsRequest* /*request*/, ::minitwitter::GetTweetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LogIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LogIn() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_LogIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogIn(::grpc::ServerContext* /*context*/, const ::minitwitter::LogInRequest* /*request*/, ::minitwitter::LogInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LogOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LogOut() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LogOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogOut(::grpc::ServerContext* /*context*/, const ::minitwitter::LogOutRequest* /*request*/, ::minitwitter::LogOutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostTweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostTweet() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PostTweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTweet(::grpc::ServerContext* /*context*/, const ::minitwitter::PostTweetRequest* /*request*/, ::minitwitter::PostTweetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostTweet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTweets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTweets() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetTweets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTweets(::grpc::ServerContext* /*context*/, const ::minitwitter::GetTweetsRequest* /*request*/, ::minitwitter::GetTweetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTweets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LogIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LogIn() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_LogIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogIn(::grpc::ServerContext* /*context*/, const ::minitwitter::LogInRequest* /*request*/, ::minitwitter::LogInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogIn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LogOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LogOut() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LogOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogOut(::grpc::ServerContext* /*context*/, const ::minitwitter::LogOutRequest* /*request*/, ::minitwitter::LogOutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogOut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PostTweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PostTweet() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostTweet(context, request, response); }));
    }
    ~WithRawCallbackMethod_PostTweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTweet(::grpc::ServerContext* /*context*/, const ::minitwitter::PostTweetRequest* /*request*/, ::minitwitter::PostTweetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PostTweet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTweets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTweets() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTweets(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTweets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTweets(::grpc::ServerContext* /*context*/, const ::minitwitter::GetTweetsRequest* /*request*/, ::minitwitter::GetTweetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTweets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LogIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LogIn() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LogIn(context, request, response); }));
    }
    ~WithRawCallbackMethod_LogIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogIn(::grpc::ServerContext* /*context*/, const ::minitwitter::LogInRequest* /*request*/, ::minitwitter::LogInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogIn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LogOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LogOut() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LogOut(context, request, response); }));
    }
    ~WithRawCallbackMethod_LogOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogOut(::grpc::ServerContext* /*context*/, const ::minitwitter::LogOutRequest* /*request*/, ::minitwitter::LogOutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogOut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostTweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostTweet() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minitwitter::PostTweetRequest, ::minitwitter::PostTweetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minitwitter::PostTweetRequest, ::minitwitter::PostTweetResponse>* streamer) {
                       return this->StreamedPostTweet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PostTweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostTweet(::grpc::ServerContext* /*context*/, const ::minitwitter::PostTweetRequest* /*request*/, ::minitwitter::PostTweetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostTweet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minitwitter::PostTweetRequest,::minitwitter::PostTweetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTweets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTweets() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minitwitter::GetTweetsRequest, ::minitwitter::GetTweetsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minitwitter::GetTweetsRequest, ::minitwitter::GetTweetsResponse>* streamer) {
                       return this->StreamedGetTweets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTweets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTweets(::grpc::ServerContext* /*context*/, const ::minitwitter::GetTweetsRequest* /*request*/, ::minitwitter::GetTweetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTweets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minitwitter::GetTweetsRequest,::minitwitter::GetTweetsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LogIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LogIn() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minitwitter::LogInRequest, ::minitwitter::LogInResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minitwitter::LogInRequest, ::minitwitter::LogInResponse>* streamer) {
                       return this->StreamedLogIn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LogIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LogIn(::grpc::ServerContext* /*context*/, const ::minitwitter::LogInRequest* /*request*/, ::minitwitter::LogInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogIn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minitwitter::LogInRequest,::minitwitter::LogInResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LogOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LogOut() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minitwitter::LogOutRequest, ::minitwitter::LogOutResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minitwitter::LogOutRequest, ::minitwitter::LogOutResponse>* streamer) {
                       return this->StreamedLogOut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LogOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LogOut(::grpc::ServerContext* /*context*/, const ::minitwitter::LogOutRequest* /*request*/, ::minitwitter::LogOutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogOut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minitwitter::LogOutRequest,::minitwitter::LogOutResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PostTweet<WithStreamedUnaryMethod_GetTweets<WithStreamedUnaryMethod_LogIn<WithStreamedUnaryMethod_LogOut<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PostTweet<WithStreamedUnaryMethod_GetTweets<WithStreamedUnaryMethod_LogIn<WithStreamedUnaryMethod_LogOut<Service > > > > StreamedService;
};

}  // namespace minitwitter


#endif  // GRPC_minitwitter_2eproto__INCLUDED
